---
import { getMoments, type Moments } from "../lib/contentful";

const moments: Moments[] = await getMoments();
---

<section id="moments" class="py-16 sm:py-24">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 overflow-hidden">
    <div class="max-w-7xl mx-auto">
      <h2 class="text-3xl sm:text-4xl font-light mb-4">Featured Moments</h2>
      <div
        class="flex flex-col sm:flex-row justify-between items-start mb-8 sm:mb-16"
      >
        <p
          class="text-gray-500 text-base sm:text-lg leading-relaxed max-w-2xl mb-6 sm:mb-0"
        >
          Our experiences reflect our distinct ethos and core values,
          highlighting the very best each of our homes offers.
        </p>
        <div class="flex gap-4">
          <button
            class="w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center rounded-full border border-gray-300 hover:bg-gray-50 transition-all duration-300 transform hover:scale-110"
            id="prevArrow"
            aria-label="Previous slide"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="#000000"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-move-left"
              ><path d="M6 8L2 12L6 16"></path><path d="M2 12H22"></path></svg
            >
          </button>
          <button
            class="w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center rounded-full border border-gray-300 hover:bg-gray-50 transition-all duration-300 transform hover:scale-110"
            id="nextArrow"
            aria-label="Next slide"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="#000000"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-move-right"
              ><path d="M18 8L22 12L18 16"></path><path d="M2 12H22"
              ></path></svg
            >
          </button>
        </div>
      </div>
    </div>

    <div class="carousel relative w-full overflow-hidden">
      <div
        class="carousel-track flex transition-transform duration-500 ease-in-out space-x-6"
        id="carouselTrack"
      >
        {
          moments.map((moment) => (
            <div class="Card flex-shrink-0 w-full sm:w-[calc(50%-12px)] lg:w-[400px] transition-all duration-500 hover:shadow-xl group hover:rotate-1 scroll-trigger">
              <div class="relative w-full h-48 sm:h-60 lg:h-[280px] overflow-hidden mb-4 sm:mb-6">
                <img
                  src={moment.image.fields.file.url}
                  alt={moment.title}
                  class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110 group-hover:rotate-2"
                />
              </div>
              <h3 class="text-xl sm:text-2xl font-light mb-2 sm:mb-3 group-hover:text-blue-600 transition-all duration-300 group-hover:translate-x-2">
                {moment.title}
              </h3>
              <p class="text-gray-500 text-sm sm:text-base leading-relaxed transition-all duration-300 group-hover:translate-x-1">
                {moment.description}
              </p>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<style>
  .carousel-track {
    display: flex;
    gap: 2rem;
    transition: transform 0.5s ease-in-out;
  }

  .Card {
    height: auto;
    min-height: 427px;
    border: none;
    box-shadow: none;
    transition: all 0.3s ease-in-out;
    opacity: 0;
    transform: translateY(50px);
  }

  .Card.animate {
    opacity: 1;
    transform: translateY(0);
  }

  .Card:hover {
    transform: translateY(-10px) rotate(100deg);
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(100px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes float {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }
</style>

<script>
  let currentIndex = 0;
  const carouselTrack = document.getElementById("carouselTrack");
  const totalCards = carouselTrack ? carouselTrack.children.length : 0;
  const prevArrow = document.getElementById("prevArrow");
  const nextArrow = document.getElementById("nextArrow");

  let cardWidth: number;
  let visibleCards: number;

  const updateCarouselDimensions = () => {
    if (!carouselTrack) return;
    const windowWidth = window.innerWidth;
    if (windowWidth < 640) {
      cardWidth = carouselTrack.offsetWidth;
      visibleCards = 1;
    } else if (windowWidth < 1024) {
      cardWidth = (carouselTrack.offsetWidth - 24) / 2;
      visibleCards = 2;
    } else {
      cardWidth = 400 + 24;
      visibleCards = Math.floor(carouselTrack.offsetWidth / cardWidth);
    }
  };

  const updateCarouselPosition = () => {
    if (!carouselTrack) return;
    carouselTrack.style.transform = `translateX(-${currentIndex * cardWidth}px)`;
  };

  const moveCarousel = (direction: number) => {
    currentIndex = (currentIndex + direction + totalCards) % totalCards;
    if (currentIndex > totalCards - visibleCards) {
      currentIndex = 0;
    } else if (currentIndex < 0) {
      currentIndex = totalCards - visibleCards;
    }
    updateCarouselPosition();
  };

  prevArrow?.addEventListener("click", () => moveCarousel(-1));
  nextArrow?.addEventListener("click", () => moveCarousel(1));

  let touchStartX = 0;
  let touchEndX = 0;

  carouselTrack?.addEventListener("touchstart", (e) => {
    touchStartX = e.changedTouches[0].screenX;
  });

  carouselTrack?.addEventListener("touchend", (e) => {
    touchEndX = e.changedTouches[0].screenX;
    if (touchStartX - touchEndX > 50) {
      moveCarousel(1);
    } else if (touchEndX - touchStartX > 50) {
      moveCarousel(-1);
    }
  });

  window.addEventListener("resize", () => {
    updateCarouselDimensions();
    updateCarouselPosition();
  });

  updateCarouselDimensions();
  updateCarouselPosition();

  setInterval(() => moveCarousel(1), 5000);

  const scrollTriggers = document.querySelectorAll(".scroll-trigger");
  const animateOnScroll = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("animate");
          (entry.target as HTMLElement).style.animation = `fadeInUp 0.6s ease-out forwards, float 3s ease-in-out infinite 0.6s`;
        }
      });
    },
    { threshold: 0.1 }
  );

  scrollTriggers.forEach((trigger) => animateOnScroll.observe(trigger));
</script>
